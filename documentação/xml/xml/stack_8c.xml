<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="stack_8c" kind="file" language="C++">
    <compoundname>stack.c</compoundname>
    <includes local="no">stdio.h</includes>
    <incdepgraph>
      <node id="1">
        <label>stack.c</label>
        <link refid="stack_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structSTACK" prot="public">STACK</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="stack_8c_1a70ed59adcb4159ac551058053e649640" prot="public" static="no">
        <name>SIZE</name>
        <initializer>10240</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.c" line="6" column="10" bodyfile="stack.c" bodystart="6" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stack_8c_1a37805f59d8b38ff39787ddff5c476f34" prot="public" static="no">
        <name>PUSH</name>
        <param><defname>s</defname></param>
        <param><defname>val</defname></param>
        <initializer>s.array[s.pos++] = val;</initializer>
        <briefdescription>
<para>empilha valores na stack </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.c" line="28" column="9" bodyfile="stack.c" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stack_8c_1ab430e768f7286ab406613648c5658eff" prot="public" static="no">
        <name>POP</name>
        <param><defname>s</defname></param>
        <initializer>s.array[--s.pos]</initializer>
        <briefdescription>
<para>retira o elemento do topo da stack </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.c" line="33" column="9" bodyfile="stack.c" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="stack_8c_1a6aa5fe75a3d28f272961cb52c6495853" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structSTACK" kindref="compound">STACK</ref></type>
        <definition>STACK criar_stack</definition>
        <argsstring>()</argsstring>
        <name>criar_stack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.c" line="20" column="7" bodyfile="stack.c" bodystart="20" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="stack_8c_1ae8408d38ede4f8cc601b71ac077d22f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_stack</definition>
        <argsstring>(STACK s)</argsstring>
        <name>print_stack</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>funçao que imprime a stack </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.c" line="38" column="6" bodyfile="stack.c" bodystart="38" bodyend="42"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="5"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SIZE<sp/><sp/>10240</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="structSTACK" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>array[<ref refid="stack_8c_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>];<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Array<sp/>que<sp/>armazena<sp/>os<sp/>elementos<sp/>da<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nº<sp/>de<sp/>elementos<sp/>na<sp/>stack<sp/>(e<sp/>indiretamente<sp/>a<sp/>sua<sp/>posição)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><ref refid="structSTACK" kindref="compound">STACK</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><ref refid="structSTACK" kindref="compound">STACK</ref><sp/><ref refid="stack_8c_1a6aa5fe75a3d28f272961cb52c6495853" kindref="member">criar_stack</ref>()<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><ref refid="structSTACK" kindref="compound">STACK</ref><sp/>s;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>s.<ref refid="structSTACK_1a34713f9f94a01dcc0642d0ea0870a335" kindref="member">pos</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor">#define<sp/>PUSH(s,<sp/>val)<sp/><sp/>s.array[s.pos++]<sp/>=<sp/>val;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor">#define<sp/>POP(s)<sp/><sp/>s.array[--s.pos]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8c_1ae8408d38ede4f8cc601b71ac077d22f5" kindref="member">print_stack</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>s.<ref refid="structSTACK_1a34713f9f94a01dcc0642d0ea0870a335" kindref="member">pos</ref>;<sp/>k++)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%ld&quot;</highlight><highlight class="normal">,<sp/>s.<ref refid="structSTACK_1ab240c12990bc44a03667bc94d74c4caf" kindref="member">array</ref>[k]);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="stack.c"/>
  </compounddef>
</doxygen>
