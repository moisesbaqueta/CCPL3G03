<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="fmaths_8h" kind="file" language="C++">
    <compoundname>fmaths.h</compoundname>
    <includedby refid="parser2_8c" local="yes">parser2.c</includedby>
    <includedby refid="parser3_8c" local="yes">parser3.c</includedby>
    <invincdepgraph>
      <node id="1">
        <label>fmaths.h</label>
        <link refid="fmaths_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>parser3.c</label>
        <link refid="parser3_8c"/>
      </node>
      <node id="2">
        <label>parser2.c</label>
        <link refid="parser2_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="fmaths_8h_1afe2abc5aca938025cbbde33d8d1962aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SUM</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>SUM</name>
        <param>
          <type><ref refid="stack3_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>funçao que soma os tipos <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- passagem de stack como parametro <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fmaths.h" line="1" column="6" bodyfile="fmaths.c" bodystart="133" bodyend="165" declfile="fmaths.h" declline="1" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fmaths_8h_1a1c4d00a5c31f302e145d9334b91d084d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SUBTRACT</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>SUBTRACT</name>
        <param>
          <type><ref refid="stack3_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>funçao que subtrai os tipos <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- passagem de stack como parametro <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fmaths.h" line="3" column="6" bodyfile="fmaths.c" bodystart="171" bodyend="203" declfile="fmaths.h" declline="3" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fmaths_8h_1add3b3c7d12d7f46d565e4254f79af786" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MULTIPLY</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>MULTIPLY</name>
        <param>
          <type><ref refid="stack3_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>funçao que multiplica os tipos <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- passagem de stack como parametro <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fmaths.h" line="5" column="6" bodyfile="fmaths.c" bodystart="208" bodyend="240" declfile="fmaths.h" declline="5" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fmaths_8h_1ac79379755267b7502a45c39ced801df4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DIVISION</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>DIVISION</name>
        <param>
          <type><ref refid="stack3_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>funçao que divide os tipos <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- passagem de stack como parametro <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fmaths.h" line="7" column="6" bodyfile="fmaths.c" bodystart="245" bodyend="277" declfile="fmaths.h" declline="7" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fmaths_8h_1a64313bb21ef5d245ff966bd3f50c1b22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DECREMENT</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>DECREMENT</name>
        <param>
          <type><ref refid="stack3_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>funçao que decrementa um <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- passagem de stack como parametro <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fmaths.h" line="9" column="6" bodyfile="fmaths.c" bodystart="282" bodyend="295" declfile="fmaths.h" declline="9" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fmaths_8h_1a335683d660be324079c4ef11c007be73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void INCREMENT</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>INCREMENT</name>
        <param>
          <type><ref refid="stack3_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>funçao que incrementa um </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- passagem de stack como parametro <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fmaths.h" line="11" column="6" bodyfile="fmaths.c" bodystart="300" bodyend="313" declfile="fmaths.h" declline="11" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fmaths_8h_1ab55b1114c66e421d274c5f0bac9b941a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MODULE</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>MODULE</name>
        <param>
          <type><ref refid="stack3_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>funçao que determina o resto de uma divisao inteira </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- passagem de stack como parametro <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fmaths.h" line="13" column="6" bodyfile="fmaths.c" bodystart="318" bodyend="335" declfile="fmaths.h" declline="13" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fmaths_8h_1a71b4941f5e6d90d0539d270b69195014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EXPO</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>EXPO</name>
        <param>
          <type><ref refid="stack3_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>exponencialização </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- passagem de stack como parametro <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fmaths.h" line="15" column="6" bodyfile="fmaths.c" bodystart="340" bodyend="372" declfile="fmaths.h" declline="15" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fmaths_8h_1ae4e742d752751b25b79b5c40d5f43f8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AMPERSAND</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>AMPERSAND</name>
        <param>
          <type><ref refid="stack3_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>funçao que determina os bits em comum </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- passagem de stack como parametro <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fmaths.h" line="17" column="6" bodyfile="fmaths.c" bodystart="377" bodyend="394" declfile="fmaths.h" declline="17" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fmaths_8h_1a06a356d61acbd3804d0cacf2332b8aef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XOR</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>XOR</name>
        <param>
          <type><ref refid="stack3_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>funçao que coloca a zero todos os bits em comum e a 1 os bits diferentes </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- passagem de stack como parametro <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fmaths.h" line="19" column="6" bodyfile="fmaths.c" bodystart="399" bodyend="416" declfile="fmaths.h" declline="19" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fmaths_8h_1a04cd57a1c9fbfe40cdf6bc006666dd88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NOT</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>NOT</name>
        <param>
          <type><ref refid="stack3_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>funçao que troca os bits </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- passagem de stack como parametro <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fmaths.h" line="21" column="6" bodyfile="fmaths.c" bodystart="421" bodyend="431" declfile="fmaths.h" declline="21" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fmaths_8h_1aac4848fd06105b23dcce7bd6f4b89b2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OR</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>OR</name>
        <param>
          <type><ref refid="stack3_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>uniao de bits entre dois numeros binarios </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- passagem de stack como parametro <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fmaths.h" line="23" column="6" bodyfile="fmaths.c" bodystart="436" bodyend="453" declfile="fmaths.h" declline="23" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fmaths_8h_1acd72ec1fe58116d8b516cc47fec0cf60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void read</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>read</name>
        <param>
          <type><ref refid="stack3_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>funçao que lê uma linha </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- passagem de stack como parametro <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fmaths.h" line="25" column="6" bodyfile="fmaths.c" bodystart="31" bodyend="36" declfile="fmaths.h" declline="25" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fmaths_8h_1adcb639470b38f6b9bcc9c5ae7460187a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void toInt</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>toInt</name>
        <param>
          <type><ref refid="stack3_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>funçao que converte para inteiro </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- passagem de stack como parametro <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fmaths.h" line="27" column="6" bodyfile="fmaths.c" bodystart="41" bodyend="52" declfile="fmaths.h" declline="27" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fmaths_8h_1a5e03e93c46e478440164976903a1ca41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void toDouble</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>toDouble</name>
        <param>
          <type><ref refid="stack3_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>funçao que converte para double </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- passagem de stack como parametro <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fmaths.h" line="29" column="6" bodyfile="fmaths.c" bodystart="57" bodyend="68" declfile="fmaths.h" declline="29" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fmaths_8h_1acc578511912df623d487b170926b2a00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void toChar</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>toChar</name>
        <param>
          <type><ref refid="stack3_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>funçao que converte para char </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- passagem de stack como parametro <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fmaths.h" line="31" column="6" bodyfile="fmaths.c" bodystart="73" bodyend="81" declfile="fmaths.h" declline="31" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fmaths_8h_1a63081a5fe789efcd1c9cf5fe7a44ab9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UNDERSCORE</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>UNDERSCORE</name>
        <param>
          <type><ref refid="stack3_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>funçao que imprime duas vezes o topo da stack </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- passagem de stack como parametro <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fmaths.h" line="33" column="6" bodyfile="fmaths.c" bodystart="86" bodyend="90" declfile="fmaths.h" declline="33" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fmaths_8h_1a4a57e01bd5d02d6228d5a9de36e674af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SEMICOLON</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>SEMICOLON</name>
        <param>
          <type><ref refid="stack3_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>funçao retira o topo da stack </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- passagem de stack como parametro <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fmaths.h" line="35" column="6" bodyfile="fmaths.c" bodystart="95" bodyend="97" declfile="fmaths.h" declline="35" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fmaths_8h_1a2a99e5c3b4586a48c240902520dd8974" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BACK_SLASH</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>BACK_SLASH</name>
        <param>
          <type><ref refid="stack3_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>funçao que troca o topo e o penultimo elemento da stack </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- passagem de stack como parametro <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fmaths.h" line="37" column="6" bodyfile="fmaths.c" bodystart="102" bodyend="107" declfile="fmaths.h" declline="37" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fmaths_8h_1a09b90d3e2c8ca5a99b5f5d81aa574a19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AT_SIGN</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>AT_SIGN</name>
        <param>
          <type><ref refid="stack3_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>funçao que roda os 3 elementos do topo da stack </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- passagem de stack como parametro <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fmaths.h" line="39" column="6" bodyfile="fmaths.c" bodystart="112" bodyend="119" declfile="fmaths.h" declline="39" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fmaths_8h_1a7f2c741873a879f42a943c2e8a083978" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void COPY</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>COPY</name>
        <param>
          <type><ref refid="stack3_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>funçao que copia o n-esimo elemento para o topo da stack </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- passagem de stack como parametro <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>- n-esimo elemento </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fmaths.h" line="41" column="6" bodyfile="fmaths.c" bodystart="125" bodyend="128" declfile="fmaths.h" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="fmaths_8h_1a62016d0e6e1a84b0493d63e5597ec172" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int verificaChar</definition>
        <argsstring>(char s)</argsstring>
        <name>verificaChar</name>
        <param>
          <type>char</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>funçao que verifica se o char está no array </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>recebe</parametername>
</parameternamelist>
<parameterdescription>
<para>o char <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>retorna 1 se for o char estiver no array, zero se nao estiver <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="fmaths.h" line="43" column="5" bodyfile="fmaths.c" bodystart="16" bodyend="26" declfile="fmaths.h" declline="43" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fmaths_8h_1afe2abc5aca938025cbbde33d8d1962aa" kindref="member">SUM</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fmaths_8h_1a1c4d00a5c31f302e145d9334b91d084d" kindref="member">SUBTRACT</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);<sp/></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fmaths_8h_1add3b3c7d12d7f46d565e4254f79af786" kindref="member">MULTIPLY</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fmaths_8h_1ac79379755267b7502a45c39ced801df4" kindref="member">DIVISION</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fmaths_8h_1a64313bb21ef5d245ff966bd3f50c1b22" kindref="member">DECREMENT</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fmaths_8h_1a335683d660be324079c4ef11c007be73" kindref="member">INCREMENT</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fmaths_8h_1ab55b1114c66e421d274c5f0bac9b941a" kindref="member">MODULE</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fmaths_8h_1a71b4941f5e6d90d0539d270b69195014" kindref="member">EXPO</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fmaths_8h_1ae4e742d752751b25b79b5c40d5f43f8f" kindref="member">AMPERSAND</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fmaths_8h_1a06a356d61acbd3804d0cacf2332b8aef" kindref="member">XOR</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fmaths_8h_1a04cd57a1c9fbfe40cdf6bc006666dd88" kindref="member">NOT</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fmaths_8h_1aac4848fd06105b23dcce7bd6f4b89b2a" kindref="member">OR</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fmaths_8h_1acd72ec1fe58116d8b516cc47fec0cf60" kindref="member">read</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fmaths_8h_1adcb639470b38f6b9bcc9c5ae7460187a" kindref="member">toInt</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fmaths_8h_1a5e03e93c46e478440164976903a1ca41" kindref="member">toDouble</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fmaths_8h_1acc578511912df623d487b170926b2a00" kindref="member">toChar</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fmaths_8h_1a63081a5fe789efcd1c9cf5fe7a44ab9b" kindref="member">UNDERSCORE</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fmaths_8h_1a4a57e01bd5d02d6228d5a9de36e674af" kindref="member">SEMICOLON</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fmaths_8h_1a2a99e5c3b4586a48c240902520dd8974" kindref="member">BACK_SLASH</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fmaths_8h_1a09b90d3e2c8ca5a99b5f5d81aa574a19" kindref="member">AT_SIGN</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fmaths_8h_1a7f2c741873a879f42a943c2e8a083978" kindref="member">COPY</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fmaths_8h_1a62016d0e6e1a84b0493d63e5597ec172" kindref="member">verificaChar</ref><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>s);</highlight></codeline>
    </programlisting>
    <location file="fmaths.h"/>
  </compounddef>
</doxygen>
