<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="stack2_8c" kind="file" language="C++">
    <compoundname>stack2.c</compoundname>
    <includes refid="stack2_8h" local="yes">stack2.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <incdepgraph>
      <node id="3">
        <label>assert.h</label>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
      <node id="1">
        <label>stack2.c</label>
        <link refid="stack2_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stack2.h</label>
        <link refid="stack2_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="stack2_8c_1a9903082d211359e185d2b31f64dc02bd" prot="public" static="no">
        <name>STACK_OPERATION</name>
        <param><defname>_type</defname></param>
        <param><defname>_name</defname></param>
        <initializer>  void push_##_name(<ref refid="stack2_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *s, _type val) {    \
    <ref refid="stack2_8h_1a4e41b34fb87c918e012cde5b33af31bf" kindref="member">DATA</ref> elem;                                \
    elem.type = _name;                        \
    elem._name = val;                         \
    <ref refid="stack2_8h_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s, elem);                            \
  }                                           \
  _type pop_##_name(<ref refid="stack2_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *s) {               \
    <ref refid="stack2_8h_1a4e41b34fb87c918e012cde5b33af31bf" kindref="member">DATA</ref> elem = <ref refid="stack2_8h_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);                       \
    assert(elem.type == _name);               \
    return elem._name;                        \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro macro que faz a substituiçao de acordo com o stack operation correspondente para podermos ter uma forma rapida de um push e pop para cada tipo </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack2.c" line="92" column="9" bodyfile="stack2.c" bodystart="92" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="stack2_8c_1aae9dbe2826c50633f609d0a71b5fbcd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int has_type</definition>
        <argsstring>(DATA elem, int mask)</argsstring>
        <name>has_type</name>
        <param>
          <type><ref refid="stack2_8h_1a4e41b34fb87c918e012cde5b33af31bf" kindref="member">DATA</ref></type>
          <declname>elem</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Funçao que verifica o tipo do token. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>- numero que é passado como parametro </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>- mascara para os tipos (long,double,char,string) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>retorna verdadeiro quando elem.type e mask têm o mesmo tipo <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack2.c" line="13" column="5" bodyfile="stack2.c" bodystart="13" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="stack2_8c_1ab37b0d083f873fbdc37d708bb9f40efc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stack2_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
        <definition>STACK* create_stack</definition>
        <argsstring>()</argsstring>
        <name>create_stack</name>
        <briefdescription>
<para>Funçao que cria a stack <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>retorna a stack </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack2.c" line="22" column="7" bodyfile="stack2.c" bodystart="22" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="stack2_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void push</definition>
        <argsstring>(STACK *s, DATA elem)</argsstring>
        <name>push</name>
        <param>
          <type><ref refid="stack2_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="stack2_8h_1a4e41b34fb87c918e012cde5b33af31bf" kindref="member">DATA</ref></type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>empilha valores na stack </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>elem</parametername>
</parameternamelist>
<parameterdescription>
<para>- numero que é passado como parametro </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- passagem de stack como parametro </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack2.c" line="34" column="6" bodyfile="stack2.c" bodystart="34" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="stack2_8c_1a28bdc96407c992586646198197537cd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stack2_8h_1a4e41b34fb87c918e012cde5b33af31bf" kindref="member">DATA</ref></type>
        <definition>DATA pop</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>pop</name>
        <param>
          <type><ref refid="stack2_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>retira valores na stack </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- passagem de stack como parametro </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>retorna o valor para o qual o stack pointer aponta </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack2.c" line="47" column="6" bodyfile="stack2.c" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="stack2_8c_1ab9f4872d50071a99ea9fc55d74d5524c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stack2_8h_1a4e41b34fb87c918e012cde5b33af31bf" kindref="member">DATA</ref></type>
        <definition>DATA enesimo</definition>
        <argsstring>(STACK *s, int n)</argsstring>
        <name>enesimo</name>
        <param>
          <type><ref refid="stack2_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>funçao que retorna o n-ésimo elemento a partir do topo da stack </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- passagem de stack como parametro </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>- n-ésimo elemento </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>retorna n-ésimo elemento </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack2.c" line="57" column="6" bodyfile="stack2.c" bodystart="57" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="stack2_8c_1a1c8a0d720a37d9d2a5844e6013c915c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stack2_8h_1a4e41b34fb87c918e012cde5b33af31bf" kindref="member">DATA</ref></type>
        <definition>DATA top</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>top</name>
        <param>
          <type><ref refid="stack2_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>topo da stack </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- passagem de stack como parametro </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>retorna o valor que está no topo da stack </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack2.c" line="65" column="6" bodyfile="stack2.c" bodystart="65" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="stack2_8c_1a42b87bab2d601cb02900935c9b80fc23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_stack</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>print_stack</name>
        <param>
          <type><ref refid="stack2_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>funçao que imprime a stack </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- passagem de stack como parametro </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack2.c" line="72" column="6" bodyfile="stack2.c" bodystart="72" bodyend="88"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="4"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stack2_8h" kindref="compound">stack2.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight></codeline>
<codeline lineno="13"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stack2_8c_1aae9dbe2826c50633f609d0a71b5fbcd3" kindref="member">has_type</ref>(<ref refid="structdata" kindref="compound">DATA</ref><sp/>elem,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(elem.<ref refid="structdata_1a876bb066356bbdd8dbadc449e4caf33c" kindref="member">type</ref><sp/>&amp;<sp/>mask)<sp/>!=<sp/>0;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><ref refid="structstack" kindref="compound">STACK</ref><sp/>*<ref refid="stack2_8c_1ab37b0d083f873fbdc37d708bb9f40efc" kindref="member">create_stack</ref>()<sp/>{<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><ref refid="structstack" kindref="compound">STACK</ref><sp/>*s<sp/>=<sp/>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*)<sp/>calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structstack" kindref="compound">STACK</ref>));<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>s-&gt;<ref refid="structstack_1a926a597bae913d1bf4772be35c14b71e" kindref="member">size</ref><sp/>=<sp/>100;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>s-&gt;<ref refid="structstack_1ac18b7057f7be1bcabbfe91eaf98e071f" kindref="member">stack</ref><sp/>=<sp/>(<ref refid="structdata" kindref="compound">DATA</ref><sp/>*)<sp/>calloc(s-&gt;<ref refid="structstack_1a926a597bae913d1bf4772be35c14b71e" kindref="member">size</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structdata" kindref="compound">DATA</ref>));</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack2_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s,<sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>elem)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(s-&gt;<ref refid="structstack_1a926a597bae913d1bf4772be35c14b71e" kindref="member">size</ref><sp/>==<sp/>s-&gt;<ref refid="structstack_1a1ed7f871b976cba29e4c5a5c6df401dd" kindref="member">n_elems</ref>)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>aumentar<sp/>o<sp/>tamanho<sp/>da<sp/>stack<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structstack_1a926a597bae913d1bf4772be35c14b71e" kindref="member">size</ref><sp/>+=<sp/>100;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structstack_1ac18b7057f7be1bcabbfe91eaf98e071f" kindref="member">stack</ref><sp/>=<sp/>(<ref refid="structdata" kindref="compound">DATA</ref><sp/>*)<sp/>realloc(s-&gt;<ref refid="structstack_1ac18b7057f7be1bcabbfe91eaf98e071f" kindref="member">stack</ref>,<sp/>s-&gt;<ref refid="structstack_1a926a597bae913d1bf4772be35c14b71e" kindref="member">size</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structdata" kindref="compound">DATA</ref>));<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>attempts<sp/>to<sp/>resize<sp/>the<sp/>memory<sp/>block<sp/>pointed<sp/>to<sp/>by<sp/>ptr<sp/>duma<sp/>calloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>s-&gt;<ref refid="structstack_1ac18b7057f7be1bcabbfe91eaf98e071f" kindref="member">stack</ref>[s-&gt;<ref refid="structstack_1a1ed7f871b976cba29e4c5a5c6df401dd" kindref="member">n_elems</ref>]<sp/>=<sp/>elem;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>s-&gt;<ref refid="structstack_1a1ed7f871b976cba29e4c5a5c6df401dd" kindref="member">n_elems</ref>++;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><ref refid="structdata" kindref="compound">DATA</ref><sp/><ref refid="stack2_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>s-&gt;<ref refid="structstack_1a1ed7f871b976cba29e4c5a5c6df401dd" kindref="member">n_elems</ref>--;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s-&gt;<ref refid="structstack_1ac18b7057f7be1bcabbfe91eaf98e071f" kindref="member">stack</ref>[s-&gt;<ref refid="structstack_1a1ed7f871b976cba29e4c5a5c6df401dd" kindref="member">n_elems</ref>];</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><ref refid="structdata" kindref="compound">DATA</ref><sp/><ref refid="stack2_8c_1ab9f4872d50071a99ea9fc55d74d5524c" kindref="member">enesimo</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n){</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s-&gt;<ref refid="structstack_1ac18b7057f7be1bcabbfe91eaf98e071f" kindref="member">stack</ref>[s-&gt;<ref refid="structstack_1a1ed7f871b976cba29e4c5a5c6df401dd" kindref="member">n_elems</ref><sp/>-<sp/>n<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><ref refid="structdata" kindref="compound">DATA</ref><sp/><ref refid="stack2_8c_1a1c8a0d720a37d9d2a5844e6013c915c2" kindref="member">top</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s-&gt;<ref refid="structstack_1ac18b7057f7be1bcabbfe91eaf98e071f" kindref="member">stack</ref>[s-&gt;<ref refid="structstack_1a1ed7f871b976cba29e4c5a5c6df401dd" kindref="member">n_elems</ref><sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack2_8c_1a42b87bab2d601cb02900935c9b80fc23" kindref="member">print_stack</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K<sp/>=<sp/>0;<sp/>K<sp/>&lt;<sp/>s-&gt;<ref refid="structstack_1a1ed7f871b976cba29e4c5a5c6df401dd" kindref="member">n_elems</ref>;<sp/>K++)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>elem<sp/>=<sp/>s-&gt;<ref refid="structstack_1ac18b7057f7be1bcabbfe91eaf98e071f" kindref="member">stack</ref>[K];</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack2_8h_1a0bc6723d5d4776ab7cdc646728b775f7" kindref="member">TYPE</ref><sp/>type<sp/>=<sp/>elem.<ref refid="structdata_1a876bb066356bbdd8dbadc449e4caf33c" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(type)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack2_8h_1a0bc6723d5d4776ab7cdc646728b775f7aaee055c4a5aba7d55774e4f1c01dacea" kindref="member">LONG</ref>:</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="stringliteral">&quot;%ld&quot;</highlight><highlight class="normal">,<sp/>elem.<ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref>);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack2_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>:</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="stringliteral">&quot;%g&quot;</highlight><highlight class="normal">,<sp/>elem.<ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref>);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack2_8h_1a0bc6723d5d4776ab7cdc646728b775f7a4618cf21306b3c647741afa7ebefcab8" kindref="member">CHAR</ref>:</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/>elem.<ref refid="structdata_1a26ec264014a6fcbcdbc5e69936e59724" kindref="member">CHAR</ref>);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="stack2_8h_1a0bc6723d5d4776ab7cdc646728b775f7aee847e634a4297b274316de8a8ca9921" kindref="member">STRING</ref>:</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>elem.<ref refid="structdata_1a3beeb46678aaab2565d0a2669c03ea1f" kindref="member">STRING</ref>);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="preprocessor">#define<sp/>STACK_OPERATION(_type,<sp/>_name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"><sp/><sp/>void<sp/>push_##_name(STACK<sp/>*s,<sp/>_type<sp/>val)<sp/>{<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DATA<sp/>elem;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>elem.type<sp/>=<sp/>_name;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>elem._name<sp/>=<sp/>val;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>push(s,<sp/>elem);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"><sp/><sp/>_type<sp/>pop_##_name(STACK<sp/>*s)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DATA<sp/>elem<sp/>=<sp/>pop(s);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>assert(elem.type<sp/>==<sp/>_name);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>elem._name;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><ref refid="stack2_8c_1a9903082d211359e185d2b31f64dc02bd" kindref="member">STACK_OPERATION</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/><ref refid="stack2_8h_1a0bc6723d5d4776ab7cdc646728b775f7aaee055c4a5aba7d55774e4f1c01dacea" kindref="member">LONG</ref>)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><ref refid="stack2_8c_1a9903082d211359e185d2b31f64dc02bd" kindref="member">STACK_OPERATION</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/><ref refid="stack2_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><ref refid="stack2_8c_1a9903082d211359e185d2b31f64dc02bd" kindref="member">STACK_OPERATION</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/><ref refid="stack2_8h_1a0bc6723d5d4776ab7cdc646728b775f7a4618cf21306b3c647741afa7ebefcab8" kindref="member">CHAR</ref>)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><ref refid="stack2_8c_1a9903082d211359e185d2b31f64dc02bd" kindref="member">STACK_OPERATION</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/><ref refid="stack2_8h_1a0bc6723d5d4776ab7cdc646728b775f7aee847e634a4297b274316de8a8ca9921" kindref="member">STRING</ref>)</highlight></codeline>
    </programlisting>
    <location file="stack2.c"/>
  </compounddef>
</doxygen>
